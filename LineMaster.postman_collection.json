{
	"info": {
		"_postman_id": "312ccfc3-82a4-4547-9cac-999085e254ac",
		"name": "LineMaster",
		"description": "# Line Master API Documentation\n\nThis collection contains endpoints for file uploading, retrieving random lines, and fetching the longest lines from files stored on the server.\n\n## Base URL\n\n- `http://127.0.0.1:8000/`\n    \n\n## Endpoints Overview:\n\n1. **Upload Files**: Upload one or more files to the server.\n    \n2. **Random Line**: Retrieve a random line from a specific file.\n    \n3. **Random Line Backwards**: Retrieve a random line from a specific file, but with the characters reversed.\n    \n4. **Longest 100 Lines**: Fetch the 100 longest lines across all files.\n    \n5. **Longest 20 Lines**: Fetch the 20 longest lines from a specific file.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "11689350"
	},
	"item": [
		{
			"name": "Upload File",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "file",
							"type": "file",
							"src": "postman-cloud:///1ef8af0d-7376-4290-b65d-e36c54956039"
						}
					]
				},
				"url": {
					"raw": "http://127.0.0.1:8000/api/upload/",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8000",
					"path": [
						"api",
						"upload",
						""
					]
				},
				"description": "## 1\\. Upload Files\n\n**Endpoint:** `/api/upload/`  \n**Method:** POST\n\n### Description\n\nThis endpoint allows users to upload multiple files to the server. The files are stored in the `FILE_STORAGE` directory defined in the project settings.\n\n### Request\n\n- **Content-Type:** `multipart/form-data`\n- **Body:**\n    - `file`: One or more files to upload (repeat this field for multiple files)\n\n### Response\n\n- **Status Code:** 201 (Created)\n- **Content-Type:** `application/json`\n    \n\n#### Success Response Body\n\n``` json\n{\n  \"results\": [\n    {\n      \"file\": \"filename1.txt\",\n      \"status\": \"uploaded\",\n      \"message\": \"File 'filename1.txt' uploaded successfully\"\n    },\n    {\n      \"file\": \"filename2.txt\",\n      \"status\": \"uploaded\",\n      \"message\": \"File 'filename2.txt' uploaded successfully\"\n    }\n  ]\n}\n\n```\n\n#### Error Response Body\n\n``` json\n{\n  \"results\": [\n    {\n      \"file\": \"filename.txt\",\n      \"status\": \"error\",\n      \"message\": \"Error message describing what went wrong\"\n    }\n  ]\n}\n\n```\n\n### Notes\n\n- If no files are provided in the request, it will return a 400 Bad Request error.\n- The function can handle multiple file uploads in a single request."
			},
			"response": []
		},
		{
			"name": "Get Random Line",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "",
						"value": "",
						"type": "text",
						"disabled": true
					}
				],
				"url": {
					"raw": "http://127.0.0.1:8000/api/random-line/<filename>/",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8000",
					"path": [
						"api",
						"random-line",
						"<filename>",
						""
					]
				},
				"description": "## 2\\. Get Random Line\n\n**Endpoint:** `/api/random-line//`  \n**Method:** GET\n\n### Description\n\nThis endpoint returns a random line from the specified file, along with additional metadata such as the line number, filename, and the most frequent character in the line.\n\n### Parameters\n\n- `filename` (string): The name of the file to read from (URL encoded)\n    \n\n### Request\n\n- **Headers:**\n    - `Accept`: Specifies the desired response format (`application/json`, `application/xml`, or `text/plain`)\n\n### Response\n\nThe response format depends on the `Accept` header:\n\n#### For `application/json` and `application/xml`:\n\n- **Status Code:** 200 (OK)\n- **Content-Type:** As specified in the `Accept` header\n    \n\n``` json\n{\n  \"line_number\": 42,\n  \"file_name\": \"example.txt\",\n  \"random_line\": \"This is a random line from the file\",\n  \"most_frequent_char\": \"e\"\n}\n\n```\n\n#### For `text/plain`:\n\n- **Status Code:** 200 (OK)\n- **Content-Type:** `text/plain`\n- **Body:** The random line as plain text\n    \n\n### Error Responses\n\n- **File Not Found:**\n    - **Status Code:** 404 (Not Found)\n    - **Body:** `{\"error\": \"File not found\"}`\n- **Empty File:**\n    - **Status Code:** 400 (Bad Request)\n    - **Body:** `{\"error\": \"File is empty\"}`\n\n### Notes\n\n- The filename in the URL should be URL encoded.\n- The function uses utility functions to check file existence and retrieve content."
			},
			"response": []
		},
		{
			"name": "Get Random Line Backwards",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://127.0.0.1:8000/api/random-line-backwards/<filename>/",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8000",
					"path": [
						"api",
						"random-line-backwards",
						"<filename>",
						""
					]
				},
				"description": "## 3\\. Get Random Line Backwards\n\n**Endpoint:** `/api/random-line-backwards//`  \n**Method:** GET\n\n### Description\n\nThis endpoint returns a random line from the specified file, but with the line reversed. It also provides additional metadata such as the line number, filename, and the most frequent character in the reversed line.\n\n### Parameters\n\n- `filename` (string): The name of the file to read from (URL encoded)\n    \n\n### Request\n\n- **Headers:**\n    - `Accept`: Specifies the desired response format (`application/json`, `application/xml`, or `text/plain`)\n\n### Response\n\nThe response format depends on the `Accept` header:\n\n#### For `application/json` and `application/xml`:\n\n- **Status Code:** 200 (OK)\n- **Content-Type:** As specified in the `Accept` header\n    \n\n``` json\n{\n  \"line_number\": 42,\n  \"file_name\": \"example.txt\",\n  \"random_line\": \"elif eht morf enil modnar a si sihT\",\n  \"most_frequent_char\": \"e\"\n}\n\n```\n\n#### For `text/plain`:\n\n- **Status Code:** 200 (OK)\n- **Content-Type:** `text/plain`\n- **Body:** The reversed random line as plain text\n    \n\n### Error Responses\n\n- **File Not Found:**\n    - **Status Code:** 404 (Not Found)\n    - **Body:** `{\"error\": \"File not found\"}`\n- **Empty File:**\n    - **Status Code:** 400 (Bad Request)\n    - **Body:** `{\"error\": \"File is empty\"}`\n\n### Notes\n\n- The filename in the URL should be URL encoded.\n- The function uses utility functions to check file existence and retrieve content.\n- The line is reversed before being returned."
			},
			"response": []
		},
		{
			"name": "Get 100 Longest Lines",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://127.0.0.1:8000/api/longest-100-lines/",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8000",
					"path": [
						"api",
						"longest-100-lines",
						""
					]
				},
				"description": "## 4\\. Get 100 Longest Lines\n\n**Endpoint:** `/api/longest-100-lines/`  \n**Method:** GET\n\n### Description\n\nThis endpoint returns the 100 longest lines from all uploaded files in the `FILE_STORAGE` directory.\n\n### Request\n\n- **Headers:**\n    - `Accept`: Specifies the desired response format (`application/json`, `application/xml`, or `text/plain`)\n\n### Response\n\nThe response format depends on the `Accept` header:\n\n#### For `application/json` and `application/xml`:\n\n- **Status Code:** 200 (OK)\n- **Content-Type:** As specified in the `Accept` header\n- **Body:** An array of the 100 longest lines\n    \n\n``` json\n[\n  \"This is one of the longest lines...\",\n  \"Another long line from a file...\",\n  ...\n]\n\n```\n\n#### For `text/plain`:\n\n- **Status Code:** 200 (OK)\n- **Content-Type:** `text/plain`\n- **Body:** The 100 longest lines, each on a new line\n    \n\n### Notes\n\n- The result is cached to improve performance on subsequent requests.\n- The function reads all lines from all files in the `FILE_STORAGE` directory.\n- Lines are sorted by length in descending order, and the top 100 are returned."
			},
			"response": []
		},
		{
			"name": "Get 20 Longest Lines from a Specific File",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://127.0.0.1:8000/api/longest-20-lines/<filename>/",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8000",
					"path": [
						"api",
						"longest-20-lines",
						"<filename>",
						""
					]
				},
				"description": "## 5\\. Get 20 Longest Lines from a Specific File\n\n**Endpoint:** `/api/longest-20-lines//`  \n**Method:** GET\n\n### Description\n\nThis endpoint returns the 20 longest lines from a specific file.\n\n### Parameters\n\n- `filename` (string): The name of the file to read from (URL encoded)\n    \n\n### Request\n\n- **Headers:**\n    - `Accept`: Specifies the desired response format (`application/json`, `application/xml`, or `text/plain`)\n\n### Response\n\nThe response format depends on the `Accept` header:\n\n#### For `application/json` and `application/xml`:\n\n- **Status Code:** 200 (OK)\n- **Content-Type:** As specified in the `Accept` header\n- **Body:** An array of the 20 longest lines from the specified file\n    \n\n``` json\n[\n  \"This is one of the longest lines in this specific file...\",\n  \"Another long line from this file...\",\n  ...\n]\n\n```\n\n#### For `text/plain`:\n\n- **Status Code:** 200 (OK)\n- **Content-Type:** `text/plain`\n- **Body:** The 20 longest lines from the specified file, each on a new line\n    \n\n### Error Responses\n\n- **File Not Found:**\n    - **Status Code:** 404 (Not Found)\n    - **Body:** `{\"error\": \"File '' not found\"}`\n- **Empty File:**\n    - **Status Code:** 400 (Bad Request)\n    - **Body:** `{\"error\": \"File is empty\"}`\n\n### Notes\n\n- The result is cached to improve performance on subsequent requests.\n- The function reads all lines from the specified file.\n- Lines are sorted by length in descending order, and the top 20 are returned."
			},
			"response": []
		}
	]
}